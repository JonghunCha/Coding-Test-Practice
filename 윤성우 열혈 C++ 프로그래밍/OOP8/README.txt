1. C, C++의 기본 배열은 경계검사를 하지 않는다는 단점이 있다. 
이는 배열이 아닌 부분에 대한 접근 가능성을 남겨두기에 코드의 안정성이 떨어진다고 볼 수 있다.
OOP8에서는 배열요소에 접근할 때 사용하는 "[ ]"연산자를 오버로딩하여 배열의 범위가 아닌곳에 접근이 불가능한 코드로 수정한다.

2. 동적할당을 사용한 클래스에 기존의 대입연산자 "="을 사용하면 동적할당을 한 부분은 메모리 영역에서 새로 복사가 되는 것이 아니라 해당 부분을 가르키는 포인터만 복사가 된다. 
C++에서는 이를 얕은 복사라고 한다. 그러나 대부분의 경우 "="를 통해 멤버 변수의 값을 똑같이 만들더라도 이후에 해당 값을 각기 다르게 수정할 일이 생길 수 있다.
이 경우 메모리상에는 실질적으로 하나의 공간만 있기 때문에 프로그램이 원하는 의도대로 작동하지 않게 된다. 
따라서 대입연산자 "="를 오버로딩하여 대입연산을 사용했을 시 동적할당 부분이 메모리 공간상에서 실제로 복사가 일어나도록(깊은 복사) 수정을 해야 한다.
OOP8에서는 Account클래스의 "char *name"이 동적할당되는 변수이기에 이를 수정한다.

아래는 OOP8에서 실질적으로 수정이 일어나는 파일들에 대한 설명이다.
Account.h / Account.cpp		: 대입연산자의 선언 및 정의
AccountArray.h / AccountArray.cpp	: 배열 클래스(BoundCheckAccountPtrArray)의 선언 및 정의
AccountHandler.h			: BoundCheckAccountPtrArray클래스의 적용